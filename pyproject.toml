[project]
name = "cursor-workshop-template"
version = "0.1.0"
description = "Cursor×Python×GitHub ハンズオン用テンプレート - 商品管理APIとStreamlit UI"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Cursor Workshop Template", email = "workshop@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: Streamlit",
]
# 基本的には依存関係なし - 必要に応じてオプショナルグループから選択
dependencies = []

# ワークショップ用のオプショナル依存関係グループ
[project.optional-dependencies]
# FastAPI開発用
api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "gunicorn>=20.1.0",
]
# Streamlit UI開発用
ui = [
    "streamlit>=1.28.0",
    "pydantic>=2.0.0",
]
# 開発・テスト用ツール
dev = [
    "pre-commit>=3.5.0",
    "pytest>=8.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "anyio>=3.0.0",
    "trio>=0.25.0",
    "httpx>=0.24.0",
    "ruff>=0.11.0",
    "pyright>=1.1.0",
    "asgi-lifespan>=2.1.0",
]
# すべてまとめて (ワークショップ用)
all = [
    "cursor-workshop-template[api,ui,dev]",
]

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [".git", ".ruff_cache", ".venv", ".vscode"]
preview = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "ANN", # flake8-annotations
    "D",  # pydocstyle
    "SIM", # flake8-simplify
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "D415", # First line should end with a period
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any)
    "RUF001", # String contains ambiguous unicode character
    "RUF002", # Docstring contains ambiguous unicode character
    "PTH100", # os.path.abspath -> Path.resolve
    "PTH118", # os.path.join -> Path
    "PTH120", # os.path.dirname -> Path.parent
    "UP035", # typing.Dict -> dict
    "F401", # Unused import
]
unfixable = ["F401", "F841"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
pythonpath = ["."]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["api", "ui"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.pyright]
pythonVersion = "3.12"
include = ["api", "ui", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv"]
reportMissingTypeStubs = false
typeCheckingMode = "basic"

