---
description: 
globs: 
alwaysApply: true
---
# Git 運用ガイドライン

## ブランチ戦略

- main: 本番環境
- feature/task-{issue番号}-{説明}: 機能開発
- fix/task-{issue番号}-{説明}: バグ修正

例：

- feature/task-1-project-setup
- fix/task-5-validation-error

## コミットメッセージ

```
<種別>: <概要>

<詳細>
```

### 種別（Types）

- feat: 新機能
- fix: バグ修正
- docs: ドキュメント
- style: フォーマット（コードの動作に影響しない）
- refactor: リファクタリング
- test: テスト
- chore: その他

### 良いコミットメッセージの例

```
feat: 商品作成エンドポイントを実装

- POST /items エンドポイントを追加
- メモリストレージを実装
- IDと作成日時の自動生成
- 包括的なテストを追加
```

### 悪い例

```
ファイル更新     # 何を更新したか不明
バグ修正        # どのバグか不明
WIP            # 作業中のコミットは避ける
```

## プルリクエスト作成

### 重要：$'...' 構文の使用

PR の本文に改行を含める場合は、**必ず $'...' 文を使用**してください。

```bash
# 正しい例：$'...'構文を使用
gh pr create \
  --title "feat: 商品作成API実装" \
  --body $'## 概要\n商品作成エンドポイントの実装\n\n## 関連Issue\nFixes #2\n\n## 変更内容\n- POST /items エンドポイント追加\n- バリデーション実装\n- テスト作成\n\n## テスト\n- [x] 全てのテストが成功\n- [x] 手動での動作確認済み'

# 誤った例：改行が正しく処理されない
gh pr create \
  --title "feat: 商品作成API実装" \
  --body "## 概要
商品作成エンドポイントの実装"  # これは動作しません
```

### PR 作成の流れ

1. テストが全て通ることを確認

```bash
uv run pytest tests/ -v
```

2. 変更をコミット

```bash
git add .
git commit -m "feat: 商品作成APIを実装"
```

3. ブランチをプッシュ

```bash
git push -u origin feature/task-2-create-api
```

4. PRを作成（$'...'構文使用）

```bash
gh pr create \
  --title "feat: Task 2 - 商品作成API実装" \
  --body $'## 概要\nTask #2 の実装\n\n## 関連Issue\nFixes #2\n\n## 実装内容\n- ✅ POST /items エンドポイント\n- ✅ バリデーション処理\n- ✅ TDDによるテスト作成\n\n## 動作確認\n```bash\ncurl -X POST "http://localhost:8000/items" \\\n  -H "Content-Type: application/json" \\\n  -d '"'"'{"name": "テスト商品", "price": 1000}'"'"'\n```'
```

## マージ戦略

- 基本的に Squash and merge を使用
- 1 つの PR は 1 つの論理的な変更単位
- マージ前に必ずテストが通ることを確認
