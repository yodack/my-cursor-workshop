---
description: 
globs: **/*.py
alwaysApply: false
---
# API 開発ガイドライン

## 必須要件

1. 全てのエンドポイントに Pydantic モデルを使用
2. 適切な HTTP ステータスコードを返す
3. エラーレスポンスは統一されたフォーマットを使用
4. 各エンドポイントに対してテストを作成

## コーディング規約

- FastAPI のベストプラクティスに従う
- 型ヒントを必ず使用
- docstring でエンドポイントの説明を記述（日本語）
- 非同期処理が可能な場合は async/await を使用

## HTTP ステータスコード

- 200: 取得成功
- 201: 作成成功
- 404: リソースが見つからない
- 422: バリデーションエラー

## エラーレスポンス形式

```json
{
  "detail": "エラーメッセージ"
}
```

## セキュリティ

- 入力値は必ず検証する
- SQL インジェクション対策を実装
- 適切な認証・認可を実装（必要に応じて）

## プロジェクト構造

```
api/               # FastAPI アプリケーション（分離デプロイ）
├── pyproject.toml # API専用の依存関係
├── main.py        # FastAPI エントリーポイント
├── models.py      # Pydantic モデル
└── storage.py     # データストレージ
```

## パッケージ管理

- uv を使用してパッケージを管理
- pyproject.toml で依存関係を定義
- `uv add` コマンドで新しいパッケージを追加

## Cloud Run デプロイ

### 手動デプロイ（推奨）

#### 必須ファイルの準備

1. **api/__init__.py**（空ファイル）
   ```bash
   touch api/__init__.py
   ```

2. **api/requirements.txt**
   ```bash
   uv pip compile pyproject.toml --extra api -o api/requirements.txt
   ```

3. **api/Procfile**
   ```
   web: gunicorn --bind 0.0.0.0:$PORT --workers 4 --worker-class uvicorn.workers.UvicornWorker main:app
   ```

4. **インポートパスを絶対インポートに変更**
   - ❌ `from .models import ProductModel`（相対インポート）
   - ✅ `from models import ProductModel`（絶対インポート）

#### デプロイコマンド

```bash
gcloud run deploy product-api \
  --source ./api \
  --region asia-northeast1 \
  --allow-unauthenticated
```

### MCPでのデプロイ（代替）

上記の準備を完了後：

```
mcp__cloud-run__deploy_local_folder
- folderPath: ./api
- project: YOUR_PROJECT_ID
- region: asia-northeast1
```
